
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -b -C -L E64_kernel.lst -o E64_kernel.bin E64_kernel.asm
; Sun Sep 29 22:37:24 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: E64_kernel.asm


;******  Processing file: E64_kernel_constants.asm

=$e0						IP0 = $e0	; pointers for interrupt routines
=$e2						IP1 = $e2
=$e4						IP2 = $e4
=$e6						IP3 = $e6
=$e8						IP4 = $e8
=$ea						IP5 = $ea
=$ec						IP6 = $ec
=$ee						IP7 = $ee
=$f0						P0 = $f0	; pointer for general use
=$f2						P1 = $f2	; pointer for general use
=$f4						P2 = $f4	; pointer for general use
=$f6						P3 = $f6	; pointer for general use
=$f8						P4 = $f8	; pointer for general use
=$fa						P5 = $fa	; pointer for general use
=$fc						P6 = $fc	; pointer for general use
=$fe						P7 = $fe	; pointer for general use
=$0800						TIMER0_VECTOR	= $0800
=$0802						TIMER1_VECTOR	= $0802
=$0804						TIMER2_VECTOR	= $0804
=$0806						TIMER3_VECTOR	= $0806
=$0808						CIA_VECTOR	= $0808
=$080a						CURSOR_POS	= $080a		; word
=$080c						CURR_TEXT_COLOR	= $080c		; byte
=$0300						CIA_BASE = $0300
=$0400						VICV_BASE = $0400
=1024						VICV_BO = VICV_BASE + $00
=1025						VICV_BG = VICV_BASE + $01
=1026						VICV_TSL = VICV_BASE + $02
=1027						VICV_TSH = VICV_BASE + $03
=1028						VICV_CSL = VICV_BASE + $04
=1029						VICV_CSH = VICV_BASE + $05
=$0500						SID0_BASE = $0500
=$0580						SID0_LEFT = $0580
=$0581						SID0_RGHT = $0581
=$0520						SID1_BASE = $0520
=$0582						SID1_LEFT = $0582
=$0583						SID1_RGHT = $0583
=$0600						TIMER_BASE = $0600
=$00						ASCII_NULL	= $00
=$08						ASCII_BKSPC	= $08
=$0a						ASCII_LF	= $0a
=$0d						ASCII_CR	= $0d
=$20						ASCII_SPACE	= $20
=$7f						ASCII_DEL	= $7f

;******  Return to file: E64_kernel.asm

.e000					cold_start
.e000	a2 ff		ldx #$ff		ldx #$ff	; prepare large stack at $dfff
.e002	a0 df		ldy #$df		ldy #$df
.e004	9a		txs			txs		; move x into sl
.e005	2b		tys			tys		; move y into sh
.e006	02		cle			cle		; clear extended mode flag to enable large stack
.e007	a9 3c		lda #$3c		lda #$3c		; load value 3000 ($0bb8 = 3000bpm = 50Hz) into low and high bytes
.e009	8d 02 06	sta $0602		sta TIMER_BASE+2	; or value $003c = 60bpm
.e00c	a9 00		lda #$00		lda #$00
.e00e	8d 03 06	sta $0603		sta TIMER_BASE+3
.e011	ad 01 06	lda $0601		lda TIMER_BASE+1	; turn on interrupt generation by clock0
.e014	09 01		ora #$01		ora #%00000001
.e016	8d 01 06	sta $0601		sta TIMER_BASE+1
.e019	a9 c1		lda #$c1		lda #<timer_irq_handler_continued
.e01b	8d 00 08	sta $0800		sta TIMER0_VECTOR
.e01e	a9 e0		lda #$e0		lda #>timer_irq_handler_continued
.e020	8d 01 08	sta $0801		sta TIMER0_VECTOR+1
.e023	a9 01		lda #$01		lda #$01	; set bit 0 in accumulator
.e025	0c 01 03	tsb $0301		tsb CIA_BASE+1	; turn on keyboard interrupt generation by CIA
.e028	a9 dc		lda #$dc		lda #<cia_irq_handler_continued
.e02a	8d 08 08	sta $0808		sta CIA_VECTOR
.e02d	a9 e0		lda #$e0		lda #>cia_irq_handler_continued
.e02f	8d 09 08	sta $0809		sta CIA_VECTOR+1
.e032	58		cli			cli		; clear irq disable flag (enable irqs)
.e033	a9 06		lda #$06		lda #$06	; blue for background
.e035	8d 01 04	sta $0401		sta VICV_BG
.e038	a9 00		lda #$00		lda #$00	; black for border
.e03a	8d 00 04	sta $0400		sta VICV_BO
.e03d	a9 0c		lda #$0c		lda #$0c	; grey for text color
.e03f	8d 0c 08	sta $080c		sta CURR_TEXT_COLOR
.e042	a9 00		lda #$00		lda #$00
.e044	8d 03 04	sta $0403		sta VICV_TSH	; point vicv to text and color screen
.e047	8d 05 04	sta $0405		sta VICV_CSH
.e04a	a9 18		lda #$18		lda #$18
.e04c	8d 02 04	sta $0402		sta VICV_TSL
.e04f	a9 19		lda #$19		lda #$19
.e051	8d 04 04	sta $0404		sta VICV_CSL
.e054	20 02 e1	jsr $e102		jsr clear_screen
.e057	f4 62 e1	phw #$e162		phw #welc1	; push the address of the first welcome message onto the stack
.e05a	20 54 e1	jsr $e154		jsr put_string
.e05d	f4 77 e1	phw #$e177		phw #welc2
.e060	20 54 e1	jsr $e154		jsr put_string
.e063	a9 82		lda #$82		lda #$82
.e065	8d 01 05	sta $0501		sta SID0_BASE+$01	; frequency of voice 1 (high byte)
.e068	a9 09		lda #$09		lda #$09
.e06a	8d 05 05	sta $0505		sta SID0_BASE+$05	; attack and decay of voice 1
.e06d	a9 1e		lda #$1e		lda #$1e
.e06f	8d 0f 05	sta $050f		sta SID0_BASE+$0f	; freq of voice 3
.e072	a9 0f		lda #$0f		lda #$0f
.e074	8d 18 05	sta $0518		sta SID0_BASE+$18	; max volume
.e077	a9 ff		lda #$ff		lda #$ff
.e079	8d 80 05	sta $0580		sta SID0_LEFT		; left channel mix
.e07c	a9 10		lda #$10		lda #$10
.e07e	8d 81 05	sta $0581		sta SID0_RGHT		; right channel mix
.e081	a9 85		lda #$85		lda #$85
.e083	8d 04 05	sta $0504		sta SID0_BASE+$04	; play bell by opening gate on bit0 register #4
.e086	ad 00 c2	lda $c200	-	lda $c200	; load a char from screen memory
.e089	1a		inc a			inc a		; increase value of accumulator
.e08a	8d 00 c2	sta $c200		sta $c200	; store it back
.e08d	a2 00		ldx #$00		ldx #$00	; init counter to 0
.e08f	bd 80 03	lda $0380,x	-	lda $0380,x	; load key state
.e092	9d 00 c4	sta $c400,x		sta $c400,x	; store it somewhere on screen
.e095	e8		inx			inc x
.e096	e0 49		cpx #$49		cpx #$49	; last key?
.e098	d0 f5		bne $e08f		bne -
.e09a	80 ea		bra $e086		bra --
.e09c					exception_handler
.e09c	48		pha			pha		; save processor state
.e09d	da		phx			phx
.e09e	5a		phy			phy
.e09f	db		phz			phz
.e0a0	ba		tsx			tsx		; load sl into x
.e0a1	0b		tsy			tsy		; load sh into y
.e0a2	86 e0		stx $e0			stx IP0		; store sp into pointer register IP0
.e0a4	84 e1		sty $e1			sty IP0+1
.e0a6	a0 05		ldy #$05		ldy #$05	; index is $5
.e0a8	b1 e0		lda ($e0),y		lda (IP0),y	; load the pushed status byte into accumulator
.e0aa	29 10		and #$10		and #%00010000	; was break "flag" present on stack?
.e0ac	f0 04		beq $e0b2		beq irq_handler	; no, branch to irq handler
.e0ae					brk_handler
.e0ae	ea		nop			nop		; blabla
.e0af	ea		nop			nop		; blabla
.e0b0	80 42		bra $e0f4		bra exception_cleanup
.e0b2					irq_handler
.e0b2					timer_irq_handler
.e0b2	ad 00 06	lda $0600		lda TIMER_BASE		; load ISR status
.e0b5	29 80		and #$80		and #%10000000		; did TIMER cause the interrupt?
.e0b7	f0 14		beq $e0cd		beq cia_irq_handler	; no, skip to cia irq handler
.e0b9	a9 01		lda #$01		lda #%00000001		; acknowledge the interrupt
.e0bb	8d 00 06	sta $0600		sta TIMER_BASE
.e0be	6c 00 08	jmp ($0800)		jmp (TIMER0_VECTOR)
.e0c1					timer_irq_handler_continued
.e0c1	ad 00 c8	lda $c800		lda $c800
.e0c4	1a		inc a			inc a
.e0c5	29 0f		and #$0f		and #%00001111
.e0c7	8d 00 c8	sta $c800		sta $c800
.e0ca	4c f4 e0	jmp $e0f4		jmp exception_cleanup
.e0cd					cia_irq_handler
.e0cd	ad 00 03	lda $0300		lda CIA_BASE		; load ISR status
.e0d0	29 80		and #$80		and #%10000000		; did CIA cause the interrupt?
.e0d2	f0 20		beq $e0f4		beq exception_cleanup	; no, skip to cleanup
.e0d4	a9 01		lda #$01		lda #%00000001	; acknowledge the interrupt
.e0d6	8d 00 03	sta $0300		sta CIA_BASE
.e0d9	6c 08 08	jmp ($0808)		jmp (CIA_VECTOR)	; jmp
.e0dc					cia_irq_handler_continued
.e0dc	ad 00 03	lda $0300		lda CIA_BASE		; if bit 0 is on, a keyboard event is waiting
.e0df	29 01		and #$01		and #%00000001
.e0e1	f0 11		beq $e0f4		beq exception_cleanup	; no, skip the next part
.e0e3	ad 02 03	lda $0302		lda CIA_BASE+2		; read a scancode
.e0e6	30 f4		bmi $e0dc		bmi cia_irq_handler_continued	; if bit 7 is set, check for a next event
.e0e8	aa		tax			tax			; move scancode into x register
.e0e9	bd 80 ff	lda $ff80,x		lda scancode_to_ascii,x	; lookup corresponding ascii value in table
.e0ec	20 29 e1	jsr $e129		jsr put_char
.e0ef	80 eb		bra $e0dc		bra cia_irq_handler_continued
.e0f1	4c f4 e0	jmp $e0f4		jmp exception_cleanup
.e0f4					exception_cleanup
.e0f4	fb		plz			plz		; cleanup stuff of the exception handler
.e0f5	7a		ply			ply		; restore processor state
.e0f6	fa		plx			plx
.e0f7	68		pla			pla
.e0f8	40		rti			rti		; return from interrupt
.e0f9					nmi_handler
.e0f9	48		pha			pha
.e0fa	da		phx			phx
.e0fb	5a		phy			phy
.e0fc	db		phz			phz
.e0fd	fb		plz			plz
.e0fe	7a		ply			ply
.e0ff	fa		plx			plx
.e100	68		pla			pla
.e101	40		rti			rti
.e102					clear_screen
.e102	a9 00		lda #$00		lda #$00
.e104	85 f0		sta $f0			sta P0
.e106	85 f2		sta $f2			sta P1
.e108	a9 c0		lda #$c0		lda #$c0
.e10a	85 f1		sta $f1			sta P0+1
.e10c	a9 c8		lda #$c8		lda #$c8
.e10e	85 f3		sta $f3			sta P1+1
.e110	a0 00		ldy #$00		ldy #$00
.e112	a9 20		lda #$20	-	lda #ASCII_SPACE
.e114	91 f0		sta ($f0),y		sta (P0),y
.e116	ad 0c 08	lda $080c		lda CURR_TEXT_COLOR	; load current text color from ram
.e119	91 f2		sta ($f2),y		sta (P1),y
.e11b	c8		iny			inc y
.e11c	d0 f4		bne $e112		bne -
.e11e	e6 f1		inc $f1			inc P0+1
.e120	e6 f3		inc $f3			inc P1+1
.e122	a6 f1		ldx $f1			ldx P0+1
.e124	e0 c8		cpx #$c8		cpx #$c8
.e126	d0 ea		bne $e112		bne -
.e128	60		rts			rts
.e129					put_char
.e129	da		phx			phx
.e12a	5a		phy			phy
.e12b	c9 0a		cmp #$0a		cmp #ASCII_LF
.e12d	f0 17		beq $e146		beq +
.e12f	aa		tax			tax
.e130	bd 00 ff	lda $ff00,x		lda ascii_to_screencode,x
.e133	ac 0a 08	ldy $080a		ldy CURSOR_POS
.e136	99 00 c0	sta $c000,y		sta $c000,y
.e139	ad 0c 08	lda $080c		lda CURR_TEXT_COLOR
.e13c	99 00 c8	sta $c800,y		sta $c800,y
.e13f	c8		iny			inc y
.e140	8c 0a 08	sty $080a		sty CURSOR_POS
.e143	7a		ply			ply
.e144	fa		plx			plx
.e145	60		rts			rts
.e146	ad 0a 08	lda $080a	+	lda CURSOR_POS		; print LF
.e149	18		clc			clc
.e14a	69 40		adc #$40		adc #$40		; add 64 chars to current position
.e14c	29 c0		and #$c0		and #%11000000		; move to the first char of the line
.e14e	8d 0a 08	sta $080a		sta CURSOR_POS
.e151	7a		ply			ply
.e152	fa		plx			plx
.e153	60		rts			rts
.e154					put_string
.e154	a0 00		ldy #$00		ldy #$00
.e156	e2 03		lda ($03,s),y	-	lda (#$03,s),y
.e158	f0 06		beq $e160		beq +
.e15a	20 29 e1	jsr $e129		jsr put_char
.e15d	c8		iny			inc y
.e15e	80 f6		bra $e156		bra -
.e160	62 02		rts #$02	+	rtn #$02
>e162	45 36 34 20 6b 65 72 6e		welc1	.text "E64 kernel V20190929",ASCII_NULL
>e16a	65 6c 20 56 32 30 31 39 30 39 32 39 00
>e177	20 28 43 29 32 30 31 39		welc2	.text " (C)2019 elmerucr",ASCII_NULL
>e17f	20 65 6c 6d 65 72 75 63 72 00

;******  Processing file: E64_kernel_rom_tables.asm

.ff00					ascii_to_screencode
>ff00	80					.byte	$80		; 0x00 - NUL	non printable character
>ff01	80					.byte	$80		; 0x01 - SOH	non printable character
>ff02	80					.byte	$80		; 0x02 - STX	non printable character
>ff03	80					.byte	$80		; 0x03 - ETX	non printable character
>ff04	80					.byte	$80		; 0x04 - EOT	non printable character
>ff05	80					.byte	$80		; 0x05 - ENQ	non printable character
>ff06	80					.byte	$80		; 0x06 - ACK	non printable character
>ff07	80					.byte	$80		; 0x07 - BEL	non printable character
>ff08	80					.byte	$80		; 0x08 - BS	non printable character
>ff09	80					.byte	$80		; 0x09 - TAB	non printable character
>ff0a	80					.byte	$80		; 0x0a - LF	non printable character
>ff0b	80					.byte	$80		; 0x0b - VT	non printable character
>ff0c	80					.byte	$80		; 0x0c - FF	non printable character
>ff0d	80					.byte	$80		; 0x0d - CR	non printable character
>ff0e	80					.byte	$80		; 0x0e - SO	non printable character
>ff0f	80					.byte	$80		; 0x0f - SI	non printable character
>ff10	80					.byte	$80		; 0x10 - DLE	non printable character
>ff11	80					.byte	$80		; 0x11 - DC1	non printable character
>ff12	80					.byte	$80		; 0x12 - DC2	non printable character
>ff13	80					.byte	$80		; 0x13 - DC3	non printable character
>ff14	80					.byte	$80		; 0x14 - DC4	non printable character
>ff15	80					.byte	$80		; 0x15 - NAC	non printable character
>ff16	80					.byte	$80		; 0x16 - SYN	non printable character
>ff17	80					.byte	$80		; 0x17 - ETB	non printable character
>ff18	80					.byte	$80		; 0x18 - CAN	non printable character
>ff19	80					.byte	$80		; 0x19 - EM	non printable character
>ff1a	80					.byte	$80		; 0x1a - SUB	non printable character
>ff1b	80					.byte	$80		; 0x1b - ESC	non printable character
>ff1c	80					.byte	$80		; 0x1c - FS	non printable character
>ff1d	80					.byte	$80		; 0x1d - GS	non printable character
>ff1e	80					.byte	$80		; 0x1e - RS	non printable character
>ff1f	80					.byte	$80		; 0x1f - US	non printable character
>ff20	20					.byte	$20		; 0x20 - (space)
>ff21	21					.byte	$21		; 0x21 - !
>ff22	22					.byte	$22		; 0x22 - "
>ff23	23					.byte	$23		; 0x23 - #
>ff24	24					.byte	$24		; 0x24 - $
>ff25	25					.byte	$25		; 0x25 - %
>ff26	26					.byte	$26		; 0x26 - &
>ff27	27					.byte	$27		; 0x27 - '
>ff28	28					.byte	$28		; 0x28 - (
>ff29	29					.byte	$29		; 0x29 - )
>ff2a	2a					.byte	$2a		; 0x2a - *
>ff2b	2b					.byte	$2b		; 0x2b - +
>ff2c	2c					.byte	$2c		; 0x2c - ,
>ff2d	2d					.byte	$2d		; 0x2d - -
>ff2e	2e					.byte	$2e		; 0x2e - .
>ff2f	2f					.byte	$2f		; 0x2f - /
>ff30	30					.byte	$30		; 0x30 - 0
>ff31	31					.byte	$31		; 0x31 - 1
>ff32	32					.byte	$32		; 0x32 - 2
>ff33	33					.byte	$33		; 0x33 - 3
>ff34	34					.byte	$34		; 0x34 - 4
>ff35	35					.byte	$35		; 0x35 - 5
>ff36	36					.byte	$36		; 0x36 - 6
>ff37	37					.byte	$37		; 0x37 - 7
>ff38	38					.byte	$38		; 0x38 - 8
>ff39	39					.byte	$39		; 0x39 - 9
>ff3a	3a					.byte	$3a		; 0x3a - :
>ff3b	3b					.byte	$3b		; 0x3b - ;
>ff3c	3c					.byte	$3c		; 0x3c - <
>ff3d	3d					.byte	$3d		; 0x3d - =
>ff3e	3e					.byte	$3e		; 0x3e - >
>ff3f	3f					.byte	$3f		; 0x3f - ?
>ff40	00					.byte	$00		; 0x40 - @
>ff41	41					.byte	$41		; 0x41 - A
>ff42	42					.byte	$42		; 0x42 - B
>ff43	43					.byte	$43		; 0x43 - C
>ff44	44					.byte	$44		; 0x44 - D
>ff45	45					.byte	$45		; 0x45 - E
>ff46	46					.byte	$46		; 0x46 - F
>ff47	47					.byte	$47		; 0x47 - G
>ff48	48					.byte	$48		; 0x48 - H
>ff49	49					.byte	$49		; 0x49 - I
>ff4a	4a					.byte	$4a		; 0x4a - J
>ff4b	4b					.byte	$4b		; 0x4b - K
>ff4c	4c					.byte	$4c		; 0x4c - L
>ff4d	4d					.byte	$4d		; 0x4d - M
>ff4e	4e					.byte	$4e		; 0x4e - N
>ff4f	4f					.byte	$4f		; 0x4f - O
>ff50	50					.byte	$50		; 0x50 - P
>ff51	51					.byte	$51		; 0x51 - Q
>ff52	52					.byte	$52		; 0x52 - R
>ff53	53					.byte	$53		; 0x53 - S
>ff54	54					.byte	$54		; 0x54 - T
>ff55	55					.byte	$55		; 0x55 - U
>ff56	56					.byte	$56		; 0x56 - V
>ff57	57					.byte	$57		; 0x57 - W
>ff58	58					.byte	$58		; 0x58 - X
>ff59	59					.byte	$59		; 0x59 - Y
>ff5a	5a					.byte	$5a		; 0x5a - Z
>ff5b	1b					.byte	$1b		; 0x5b - [
>ff5c	5c					.byte	$5c		; 0x5c - \	patched
>ff5d	1d					.byte	$1d		; 0x5d - ]
>ff5e	5e					.byte	$5e		; 0x5e - ^	patched
>ff5f	5f					.byte	$5f		; 0x5f - _	patched
>ff60	63					.byte	$63		; 0x60 - `	patched
>ff61	01					.byte	$01		; 0x61 - a
>ff62	02					.byte	$02		; 0x62 - b
>ff63	03					.byte	$03		; 0x63 - c
>ff64	04					.byte	$04		; 0x64 - d
>ff65	05					.byte	$05		; 0x65 - e
>ff66	06					.byte	$06		; 0x66 - f
>ff67	07					.byte	$07		; 0x67 - g
>ff68	08					.byte	$08		; 0x68 - h
>ff69	09					.byte	$09		; 0x69 - i
>ff6a	0a					.byte	$0a		; 0x6a - j
>ff6b	0b					.byte	$0b		; 0x6b - k
>ff6c	0c					.byte	$0c		; 0x6c - l
>ff6d	0d					.byte	$0d		; 0x6d - m
>ff6e	0e					.byte	$0e		; 0x6e - n
>ff6f	0f					.byte	$0f		; 0x6f - o
>ff70	10					.byte	$10		; 0x70 - p
>ff71	11					.byte	$11		; 0x71 - q
>ff72	12					.byte	$12		; 0x72 - r
>ff73	13					.byte	$13		; 0x73 - s
>ff74	14					.byte	$14		; 0x74 - t
>ff75	15					.byte	$15		; 0x75 - u
>ff76	16					.byte	$16		; 0x76 - v
>ff77	17					.byte	$17		; 0x77 - w
>ff78	18					.byte	$18		; 0x78 - x
>ff79	19					.byte	$19		; 0x79 - y
>ff7a	1a					.byte	$1a		; 0x7a - z
>ff7b	64					.byte	$64		; 0x7b - {	patched
>ff7c	65					.byte	$65		; 0x7c - |	patched
>ff7d	66					.byte	$66		; 0x7d - }	patched
>ff7e	67					.byte	$67		; 0x7e - ~	patched
>ff7f	80					.byte	$80		; 0x7f - DEL	non printable character
.ff80					scancode_to_ascii:
>ff80	80					.byte	$80		; C256_SCANCODE_EMPTY
>ff81	80					.byte	$80		; C256_SCANCODE_ESCAPE
>ff82	80				    	.byte	$80		; C256_SCANCODE_F1,
>ff83	80					.byte	$80		; C256_SCANCODE_F2,
>ff84	80					.byte	$80		; C256_SCANCODE_F3,
>ff85	80					.byte	$80		; C256_SCANCODE_F4,
>ff86	80					.byte	$80		; C256_SCANCODE_F5,
>ff87	80					.byte	$80		; C256_SCANCODE_F6,
>ff88	80					.byte	$80		; C256_SCANCODE_F7,
>ff89	80					.byte	$80		; C256_SCANCODE_F8,
>ff8a	60					.byte	$60		; C256_SCANCODE_GRAVE,
>ff8b	31					.byte	$31		; C256_SCANCODE_1,
>ff8c	32					.byte	$32		; C256_SCANCODE_2,
>ff8d	33					.byte	$33		; C256_SCANCODE_3,
>ff8e	34					.byte	$34		; C256_SCANCODE_4,
>ff8f	35					.byte	$35		; C256_SCANCODE_5,
>ff90	36					.byte	$36		; C256_SCANCODE_6,
>ff91	37					.byte	$37		; C256_SCANCODE_7,
>ff92	38					.byte	$38		; C256_SCANCODE_8,
>ff93	39					.byte	$39		; C256_SCANCODE_9,
>ff94	30					.byte	$30		; C256_SCANCODE_0,
>ff95	2d					.byte	$2d		; C256_SCANCODE_MINUS,
>ff96	3d					.byte	$3d		; C256_SCANCODE_EQUALS,
>ff97	80					.byte	$80		; C256_SCANCODE_BACKSPACE,
>ff98	80					.byte	$80		; C256_SCANCODE_TAB,
>ff99	71					.byte	$71		; C256_SCANCODE_Q,
>ff9a	77					.byte	$77		; C256_SCANCODE_W,
>ff9b	65					.byte	$65		; C256_SCANCODE_E,
>ff9c	72					.byte	$72		; C256_SCANCODE_R,
>ff9d	74					.byte	$74		; C256_SCANCODE_T,
>ff9e	79					.byte	$79		; C256_SCANCODE_Y,
>ff9f	75					.byte	$75		; C256_SCANCODE_U,
>ffa0	69					.byte	$69		; C256_SCANCODE_I,
>ffa1	6f					.byte	$6f		; C256_SCANCODE_O,
>ffa2	70					.byte	$70		; C256_SCANCODE_P,
>ffa3	5b					.byte	$5b		; C256_SCANCODE_[,
>ffa4	5d					.byte	$5d		; C256_SCANCODE_],
>ffa5	0a					.byte	$0a		; C256_SCANCODE_LF,
>ffa6	61					.byte	$61		; C256_SCANCODE_A,
>ffa7	73					.byte	$73		; C256_SCANCODE_S,
>ffa8	64					.byte	$64		; C256_SCANCODE_D,
>ffa9	66					.byte	$66		; C256_SCANCODE_F,
>ffaa	67					.byte	$67		; C256_SCANCODE_G,
>ffab	68					.byte	$68		; C256_SCANCODE_H,
>ffac	6a					.byte	$6a		; C256_SCANCODE_J,
>ffad	6b					.byte	$6b		; C256_SCANCODE_K,
>ffae	6c					.byte	$6c		; C256_SCANCODE_L,
>ffaf	3b					.byte	$3b		; C256_SCANCODE_;,
.ffb0					hex_table
>ffb0	30 31 32 33 34 35 36 37			.text	"0123456789abcdef"
>ffb8	38 39 61 62 63 64 65 66

;******  Return to file: E64_kernel.asm

.fffa					nmi_vector
>fffa	f9 e0					.word nmi_handler
.fffc					reset_vector
>fffc	00 e0					.word cold_start
.fffe					brk_vector
>fffe	9c e0					.word exception_handler

;******  End of listing
